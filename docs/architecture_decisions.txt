Components:
- Frontend
  - Handles UI and accepts user actions.

- Persons Service
  - Handles query and create person requests using REST API.

- Connections Service
  - Handles request queries using REST API.

- Locations Service
  - Handles location request queries using REST API.

- Location Writer
  - Produces location creation requests through Kafka queue using gRPC message passing.

- Location Consumer
  - Consumes location creation requests from Kafka queue and store locations in database.

Architecture Decision:

1. Created Persons, Connections Locations services using REST API because users will mainly access through website. Currently REST API is most suitable and less complexity for customer facing apps.

2. Created LocationWriter using gRPC because many users will periodically send their current locations which can lead to high traffic. gRPC is more faster and efficient than REST because of tight packing of the Protocol Buffers and use of HTTP2.

3. Used Kafka message to create locations to handle large volume of data from users. Writing message to Kafka is a lot of faster than writing to database because it is only appending to the next offset. The queue will buffer the huge insertions to the database.